#!/usr/bin/env python3


# TODO 2020-01-01: Remove python 2 support.
from __future__ import (absolute_import, division,
                        print_function, unicode_literals)
import sys
if sys.version_info < (3, 0):
    try:
        from builtins import *
    except:
        print("Python 2 support requires the 'future' package.",
              file=sys.stderr)
        sys.exit(1)

import argparse
import hashlib


def gen_id(name, extended=False):
    """Generate a numerical ID from a user/group name.

    The returned UID/GID will be in the range 10000 to 59999 or
    100000000 to 999999999) if 32-bit UID/GIDs are enabled.
    
    The first range allows ID's 1000 to 9999 to be for used manually
    created users and does not interfere with some systems that use ID's
    in the 600000 range for special users such as nobody.

    It is recommended to stick with the standard range unless you are
    likely to have more than 100 users, in which case the chance of a
    hash collision exceeds 1% and the extended version should be used.
    The extended version exceeds 1% chance of hash collision at about
    4000 users.

    Parameters
    ----------
    name : str
        User or group name to generate the UID/GID for.
    extended : bool, optional
        Enable 32-bit (instead of 16-bit) UID/GID numbers.

    """
    digest = int(hashlib.sha1(name.encode('ascii')).hexdigest(), 16)

    if extended:
        return digest % (999999999 - 100000000 + 1) + 100000000
    return digest % (59999 - 10000 + 1) + 10000


def __parse_args():
    parser = argparse.ArgumentParser(
        description=('Generate a repeatable UID/GID from a ' +
                     'given username/groupname.'))
    parser.add_argument(
        'name', type=str,
        help='username/groupname to generate ID for')
    parser.add_argument(
        '--extended', '-e', action='store_true',
        help=('enables extended 32-bit UID range instead of the ' +
              'default 16-bit range'))
    return parser.parse_args()


if __name__ == "__main__":
    args = __parse_args()
    id_ = gen_id(args.name, extended=args.extended)
    print(id_)
