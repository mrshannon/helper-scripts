#!/usr/bin/env python3


# TODO 2020-01-01: Remove python 2 support.
from __future__ import (absolute_import, division,
                        print_function, unicode_literals)
import sys
if sys.version_info < (3, 0):
    try:
        from builtins import *
    except:
        print("Python 2 support requires the 'future' package.",
              file=sys.stderr)
        sys.exit(1)

import argparse
import hashlib


def gen_id(name, extended=False):
    """Generate a numerical ID from a user/group name.

    The returned UID/GID will be 4096 or greater, or 65536 or greater if
    32-bit UID/GIDs are enabled.

    Parameters
    ----------
    name : str
        User or group name to generate the UID/GID for.
    extended : bool, optional
        Enable 32-bit (instead of 16-bit) UID/GID numbers.

    """
    digest = int(hashlib.sha1(name.encode('ascii')).hexdigest(), 16)
    if extended:
        return int(hex(digest + 0x10000)[-8:], 16)
    return int(hex(digest + 0x1000)[-4:], 16)


def __parse_args():
    parser = argparse.ArgumentParser(
        description=('Generate a repeatable UID/GID from a ' +
                     'given username/groupname.'))
    parser.add_argument(
        'name', type=str,
        help='username/groupname to generate ID for')
    parser.add_argument(
        '--extended', '-e', action='store_true',
        help=('enables extended 32-bit UID range instead of the ' +
              'default 16-bit range'))
    return parser.parse_args()


if __name__ == "__main__":
    args = __parse_args()
    id_ = gen_id(args.name, extended=args.extended)
    print(id_)
